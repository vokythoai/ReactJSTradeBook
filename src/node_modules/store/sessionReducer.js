import createReducer from 'libs/createReducer'

export const REGISTER = 'session/REGISTER'
export const REGISTRATION_FAILED = 'session/REGISTRATION_FAILED'
export const REGISTRATION_SUCCEED = 'session/REGISTRATION_SUCCEED'
export const AUTHORIZATION_SUCCEED = 'session/AUTHORIZATION_SUCCEED'
export const AUTHORIZATION_FAILED = 'session/AUTHORIZATION_FAILED'
export const AUTHORIZE = 'session/AUTHORIZE'
export const UPDATE_USER = 'session/UPDATE_USER'
export const UPDATE_USER_SUCCEED = 'session/UPDATE_USER_SUCCEED'
export const UPDATE_USER_FAILED = 'session/UPDATE_USER_FAILED'
export const RESET_PASSWORD = 'session/RESET_PASSWORD'
export const RESET_PASSWORD_SUCCEED = 'session/RESET_PASSWORD_SUCCEED'
export const RESET_PASSWORD_FAILED = 'session/RESET_PASSWORD_FAILED'
export const SET_NEW_PASSWORD = 'session/SET_NEW_PASSWORD'
export const SET_INITIAL_PASSWORD = 'session/SET_INITIAL_PASSWORD'
export const SET_NEW_PASSWORD_SUCCEED = 'session/SET_NEW_PASSWORD_SUCCEED'
export const SET_NEW_PASSWORD_FAILED = 'session/SET_NEW_PASSWORD_FAILED'
export const UNAUTHORIZED_RESPONSE = 'session/UNAUTHORIZED_RESPONSE'

const errorMessages = (serverMessage) => {
  switch (serverMessage) {
    case "Couldn't find BeachApiCore::User":
      return 'Authorization failed. User with this email not found'
    default:
      return `Authorization failed. ${serverMessage}`
  }
}

export default createReducer(
  {
    registered: true,
    registrationError: false,
    errorMessage: '',
    accessToken: '',
    user: {email: '', password: ''},
    authorized: false
  },
  {
    [REGISTRATION_FAILED]: (state, action) =>
      ({
        ...state,
        registred: false,
        registrationError: true,
        errorMessage: action.message,
        user: {}
      }),

    [REGISTRATION_SUCCEED]: (state, action) =>
      ({
        accessToken: action.accessToken,
        authorized: true,
        user: action.user,
        registred: true,
        registrationError: false,
        errorMessage: ''
      }),

    [AUTHORIZATION_SUCCEED]: (state, {user, accessToken}) =>
      ({
        accessToken: accessToken,
        authorized: true,
        user: user,
        registred: true,
        registrationError: false,
        errorMessage: ''
      }),

    [AUTHORIZATION_FAILED]: (state, {message}) =>
      ({
        ...state,
        errorMessage: errorMessages(message)
      }),

    [UPDATE_USER_SUCCEED]: (state, {user, message}) =>
      ({
        ...state,
        user,
        errorMessage: errorMessages(message)
      }),

    [RESET_PASSWORD_SUCCEED]: (state, {message}) =>
      ({
        ...state,
        errorMessage: message
      }),

    [RESET_PASSWORD_FAILED]: (state, {message}) =>
      ({
        ...state,
        errorMessage: message
      }),

    [SET_NEW_PASSWORD_SUCCEED]: (state, {message}) =>
      ({
        ...state,
        errorMessage: message
      }),

    [SET_NEW_PASSWORD_FAILED]: (state, {message}) =>
      ({
        ...state,
        errorMessage: message
      }),

    [UNAUTHORIZED_RESPONSE]: (state, action) =>
      ({
        accessToken: '',
        authorized: false,
        user: null,
        registred: false,
        registrationError: false,
        errorMessage: ''
      })
  }
)
